<?xml version="1.0" encoding="UTF-8"?>
<web-app id="WebApp_ID" version="2.5" xmlns="http://java.sun.com/xml/ns/javaee"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_2_5.xsd">

    <listener>
        <listener-class>net.ymate.platform.webmvc.support.WebAppEventListener</listener-class>
    </listener>

    <filter>
        <filter-name>GeneralWebFilter</filter-name>
        <filter-class>net.ymate.platform.webmvc.support.GeneralWebFilter</filter-class>
        <init-param>
            <param-name>responseHeaders</param-name>
            <!--
            HTTP 响应头信息中的 X-Frame-Options，可以指示浏览器是否应该加载一个 iframe 中的页面。
            如果服务器响应头信息中没有 X-Frame-Options，则该网站存在 ClickJacking 攻击风险。
            网站可以通过设置 X-Frame-Options 阻止站点内的页面被其他页面嵌入从而防止点击劫持。
            添加 X-Frame-Options 响应头，赋值有如下三种：
                1、DENY: 不能被嵌入到任何iframe或者frame中。
                2、SAMEORIGIN: 页面只能被本站页面嵌入到iframe或者frame中。
                3、ALLOW-FROM uri: 只能被嵌入到指定域名的框架中。
            -->
            <param-value>X-Frame-Options=SAMEORIGIN</param-value>
        </init-param>
    </filter>
    <filter-mapping>
        <filter-name>GeneralWebFilter</filter-name>
        <url-pattern>/*</url-pattern>
    </filter-mapping>

    <filter>
        <filter-name>DispatchFilter</filter-name>
        <filter-class>net.ymate.platform.webmvc.support.DispatchFilter</filter-class>
    </filter>
    <filter-mapping>
        <filter-name>DispatchFilter</filter-name>
        <url-pattern>/*</url-pattern>
        <dispatcher>REQUEST</dispatcher>
        <dispatcher>FORWARD</dispatcher>
    </filter-mapping>

    <!--
    <servlet>
        <servlet-name>DispatchServlet</servlet-name>
        <servlet-class>net.ymate.platform.webmvc.support.DispatchServlet</servlet-class>
    </servlet>
    <servlet-mapping>
        <servlet-name>DispatchServlet</servlet-name>
        <url-pattern>/service/*</url-pattern>
    </servlet-mapping>
    -->

    <!--
    OPTIONS 方法是用于请求获得由 Request-URI 标识的资源在请求/响应的通信过程中可以使用的功能选项。
    通过这个方法，客户端可以在采取具体资源请求之前，决定对该资源采取何种必要措施，或者了解服务器的性能。
    OPTIONS 方法可能会暴露一些敏感信息，这些信息将帮助攻击者准备更进一步的攻击。
    -->
    <security-constraint>
        <web-resource-collection>
            <web-resource-name>RequestMethodDenied</web-resource-name>
            <url-pattern>/*</url-pattern>
            <!--
            <http-method>GET</http-method>
            <http-method>POST</http-method>
            <http-method>OPTIONS</http-method>
            -->
            <http-method>PUT</http-method>
            <http-method>HEAD</http-method>
            <http-method>TRACE</http-method>
            <http-method>DELETE</http-method>
            <http-method>SEARCH</http-method>
            <http-method>COPY</http-method>
            <http-method>MOVE</http-method>
            <http-method>PROPFIND</http-method>
            <http-method>PROPPATCH</http-method>
            <http-method>MKCOL</http-method>
            <http-method>LOCK</http-method>
            <http-method>UNLOCK</http-method>
        </web-resource-collection>
        <auth-constraint/>
    </security-constraint>

    <welcome-file-list>
        <welcome-file>index.html</welcome-file>
        <welcome-file>index.jsp</welcome-file>
    </welcome-file-list>

    <error-page>
        <error-code>400</error-code>
        <location>/WEB-INF/templates/error.jsp?status=400</location>
    </error-page>
    <error-page>
        <error-code>401</error-code>
        <location>/WEB-INF/templates/error.jsp?status=401</location>
    </error-page>
    <error-page>
        <error-code>404</error-code>
        <location>/WEB-INF/templates/error.jsp?status=404</location>
    </error-page>
    <error-page>
        <error-code>405</error-code>
        <location>/WEB-INF/templates/error.jsp?status=405</location>
    </error-page>
    <error-page>
        <error-code>500</error-code>
        <location>/WEB-INF/templates/error.jsp?status=500</location>
    </error-page>
</web-app>